import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import ParticleBackground from "@/components/ui/particle-background";
import { PortfolioNavbar } from "@/components/ui/portfolio-navbar";
import ScrollProgressIndicator from "@/components/ui/scroll-indicator";
import fetchContentType from "@/lib/strapi/fetchContentType";
import PageTransition from "@/components/ui/page-transition";
import Footer from "@/components/ui/footer";
import LayoutPreloader from "@/components/ui/layout-preloader";
import Preloader from "@/components/ui/preloader";


const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Fetch logo at layout level for navbar
  const data = await fetchContentType(
    "global",
    { populate: { personnelInformations: { populate: "*" } } },
    true,
  );
  const info = data?.personnelInformations;
  const logo = info?.logo;
  const logoUrl = logo?.url;
  // Keep logo URL relative (e.g., /uploads/logo.svg) so it is served
  // by this Next app and proxied to Strapi via rewrites.
  const logoSrc = typeof logoUrl === "string" ? logoUrl : "";
  return (
    <html lang="en" className="dark overflow-x-hidden">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased overflow-x-hidden`}
      >
        <LayoutPreloader />
        <ParticleBackground />
        <PageTransition>
          <PortfolioNavbar logoSrc={logoSrc} logoAlt={logo?.alternativeText || logo?.name || "Logo"} />
          {info?.email && (
            <a
              href={`mailto:${info.email}`}
              className="hidden md:flex fixed left-4 top-[85%] -translate-y-1/2 -rotate-90 origin-left text-white/70 hover:text-white transition-colors z-20 tracking-widest uppercase text-xs"
              aria-label={`Email ${info.firstName} ${info.lastName}`}
            >
              {info.email}
            </a>
          )}
          {children}
        </PageTransition>
        <Footer
          name={[info?.firstName, info?.lastName].filter(Boolean).join(" ") || undefined}
          email={info?.email || undefined}
          github={info?.github || undefined}
        />
        <ScrollProgressIndicator />
        <Preloader />
      </body>
    </html>
  );
}
